USE GRAPH faers

CREATE QUERY jaccard_nbor_reaction(VERTEX source, STRING etype ="hasReactions", INT top_k=100, INT sampSize=100) FOR GRAPH faers SYNTAX v1 { 
//example: ReportedCase=100640876
/*
Calculates the Jaccard Similarity between a given vertex and every other
vertex. A simplified version of the generic purpose algorithm
jacccard_nbor_ss in the GSQL Graph Data Science Library
https://github.com/tigergraph/gsql-graph-algorithms

Note: In versions 3.5 and earlier, the SAMPLE clause was only supported in Syntax V1, 
so this query uses Syntax V1. The default Syntax V2 may be used in future versions that support SAMPLE.
*/
    SumAccum<INT> @intersection_size, @@set_size_A, @set_size_B;
    SumAccum<FLOAT> @similarity;
    SumAccum<INT> @@tSize;
        
    Start (ANY) = {source};
    Start = SELECT s
        FROM Start:s
        ACCUM @@set_size_A += s.outdegree(etype);

    Neighbors = SELECT t
        FROM Start:s-(etype:e)-:t;

    Others = SELECT t
        FROM Neighbors:s -(:e)- :t
        SAMPLE sampSize EDGE when s.outdegree(etype) > sampSize
        WHERE t != source
        ACCUM t.@intersection_size += 1,
            t.@set_size_B = t.outdegree(etype)
        POST-ACCUM t.@similarity = t.@intersection_size*1.0/
                  (@@set_size_A + t.@set_size_B - t.@intersection_size),
            @@tSize += 1
        ORDER BY t.@similarity DESC
        LIMIT top_k;

    PRINT Others;
    PRINT @@tSize, Others.size();
}
CREATE QUERY mostReportedDrugsForCompany_v2(STRING company_name="PFIZER", INT k=5, STRING role="PS") FOR GRAPH faers SYNTAX v2 { 
    // Possible values for role: PS, SS, I, C
    // PS = primary suspect drug, SS = secondary suspect drug
    // C = concomitant, I = interacting
  
    # Keep count of how many times each drug is mentioned.
    SumAccum<INT> @numCases;

    # 1. Find all cases where the given pharma company is the 'mfr_sndr'
    Company = {PharmaCompany.*};
    Cases = SELECT c
        FROM Company:s -(relatedTo:e)- ReportedCase:c
        WHERE s.mfr_sndr == company_name
    ;
    
    #. 2. Find all drug sequences for the selected cases.
    DrugSeqs = SELECT ds
        FROM Cases:c -(hasSequences:e)- DrugSequence:ds
        WHERE (role == "" OR ds.role_cod == role)
    ;
    
    # 3. Count occurences of each drug mentioned in each drug sequence.
    TopDrugs = SELECT d
        FROM DrugSeqs:ds -(hasDrugs:e)- Drug:d
        ACCUM d.@numCases += 1
        ORDER BY d.@numCases DESC
        LIMIT k
    ;
    
    PRINT TopDrugs; 	
}
CREATE QUERY topSideEffectsForTopDrugs(STRING company_name="PFIZER", INT k=5, STRING role="PS") FOR GRAPH faers SYNTAX v2 { 
    // Possible values for role: PS, SS, I, C
    // PS = primary suspect drug, SS = secondary suspect drug
    // C = concomitant, I = interacting

    # Define a heap which sorts the reaction map (below) by count.
    TYPEDEF TUPLE<STRING name, INT cnt> tally;
    HeapAccum<tally>(k, cnt DESC) @topReactions;
         
    # Keep count of how many times each reaction or drug is mentioned.
    ListAccum<STRING> @reactionList;
    SumAccum<INT> @numCases;
    MapAccum<STRING, INT> @reactionTally;

    # 1. Find all cases where the given pharma company is the 'mfr_sndr'
    Company = {PharmaCompany.*};
    Cases = SELECT c
        FROM Company:s -(relatedTo:e)- ReportedCase:c
        WHERE s.mfr_sndr == company_name;

    # 2. For each case, attach a list of its reactions.
    Tally = SELECT r
        FROM Cases:c -(hasReactions:e)- Reaction:r
        ACCUM c.@reactionList += r.pt;
         
    # 3. Find all drug sequences for the selected cases, and transfer
    #    the reaction list to the drug sequence.
    DrugSeqs = SELECT ds
        FROM Cases:c -(hasSequences:e)- DrugSequence:ds
        WHERE (role == "" OR ds.role_cod == role)
        ACCUM ds.@reactionList = c.@reactionList;
    
    # 4. Count occurences of each drug mentioned in each drug sequence.
    #    Also count the occurences of each reaction.
    TopDrugs = SELECT d
        FROM DrugSeqs:ds -(hasDrugs:e)- Drug:d
        ACCUM d.@numCases += 1,
            FOREACH reaction in ds.@reactionList DO
                d.@reactionTally += (reaction -> 1)
           END
        ORDER BY d.@numCases DESC
        LIMIT k;
         
    # 5. Find only the Top K side effects for each selected Drug.
    TopDrugs = SELECT d
         FROM TopDrugs:d 
         ACCUM
             FOREACH (reaction, cnt) IN d.@reactionTally DO
                 d.@topReactions += tally(reaction,cnt)
             END
         ORDER BY d.@numCases DESC;
    
    PRINT TopDrugs[TopDrugs.prod_ai, TopDrugs.@numCases,
                   TopDrugs.@topReactions];
}

